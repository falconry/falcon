Changelog for Falcon 2.0.0
==========================

Breaking Changes
----------------

- Previously, several methods in the :class:`~.Response` class
  could be used to attempt to set raw cookie headers. However,
  due to the Set-Cookie header values not being combinable
  as a comma-delimited list, this resulted in an
  incorrect response being constructed for the user agent in
  the case that more than one cookie was being set. Therefore,
  the following methods of ``falcon.Response`` now raise an
  instance of ``ValueError`` if an attempt is made to use them
  for Set-Cookie: :meth:`~.Response.set_header`,
  :meth:`~.Response.delete_header`, :meth:`~.Response.get_header`,
  :meth:`~.Response.set_headers`.
- :attr:`falcon.testing.Result.json` now returns ``None`` when the response body is
  empty, rather than raising an error.
- :meth:`~.Request.get_param_as_bool` now defaults to treating valueless
  parameters as truthy, rather than falsy. ``None`` is still returned
  by default when the parameter is altogether missing.
- :meth:`~.Request.get_param_as_bool` no longer raises an error for a
  valueless parameter when the ``blank_as_true`` keyword argument is ``False``.
  Instead, ``False`` is simply returned in that case.
- :attr:`~.RequestOptions.keep_blank_qs_values` now defaults to ``True``
  instead of ``False``.
- :attr:`~.RequestOptions.auto_parse_qs_csv` now defaults to ``False``
  instead of ``True``.
- ``independent_middleware`` kwarg on :class:`falcon.API` now defaults to 
  ``True`` instead of ``False``.
- The deprecated ``stream_len`` property was removed from the
  :class:`~.Response` class. Please use :meth:`~.Response.set_stream` or
  :attr:`~.Response.content_length` instead.
- Request :attr:`~.Request.context_type` was changed from dict to a subclass of
  dict.
- Response :attr:`~.Response.context_type` was changed from dict to a subclass
  of dict.
- :class:`~.media.JSONHandler` and :class:`~.HTTPError` no longer use
  `ujson` in lieu of the standard `json` library (when `ujson` is available in
  the environment). Instead, :class:`~.media.JSONHandler` can now be configured
  to use arbitrary ``dumps()`` and ``loads()`` functions. If you
  also need to customize :class:`~.HTTPError` serialization, you can do so via
  :meth:`~.API.set_error_serializer`.
- In order to improve performance, the :attr:`falcon.Request.headers` and
  :attr:`falcon.Request.cookies` properties now return a direct reference to
  an internal cached object, rather than making a copy each time. This
  should normally not cause any problems with existing apps since these objects
  are generally treated as read-only by the caller.
- The :attr:`falcon.Request.stream` attribute is no longer wrapped in a bounded
  stream when Falcon detects that it is running on the wsgiref server. If you
  need to normalize stream semantics between wsgiref and a production WSGI
  server, :attr:`~.Request.bounded_stream` may be used instead.

Changes to Supported Platforms
------------------------------

- CPython 3.7 is now fully supported.

New & Improved
--------------

- Added a new :attr:`~.Response.headers` property to the :class:`~.Response` class.
- Removed the :py:mod:`six` and :py:mod:`python-mimeparse` dependencies.
- Request :attr:`~.Request.context_type` now defaults to a bare class allowing
  to set attributes on the request context object::

    # Before
    req.context['role'] = 'trial'
    req.context['user'] = 'guest'

    # Falcon 2.0
    req.context.role = 'trial'
    req.context.user = 'guest'

  To ease the migration path, the previous behavior is supported by subclassing
  dict, however, as of Falcon 2.0, the dict context interface is considered
  deprecated, and may be removed in a future release. It is also noteworthy
  that object attributes and dict items are not automagically linked in any
  special way, and setting one does not affect the other.

  Applications can work around this change by explicitly overriding
  :attr:`~.Request.context_type` to dict.

- Response :attr:`~.Response.context_type` now defaults to a bare class allowing
  to set attributes on the response context object::

    # Before
    resp.context['cache_strategy'] = 'lru'

    # Falcon 2.0
    resp.context.cache_strategy = 'lru'

  To ease the migration path, the previous behavior is supported by subclassing
  dict, however, as of Falcon 2.0, the dict context interface is considered
  deprecated, and may be removed in a future release. It is also noteworthy
  that object attributes and dict items are not automagically linked in any
  special way, and setting one does not affect the other.

  Applications can work around this change by explicitly overriding
  :attr:`~.Response.context_type` to dict.
- :class:`~.media.JSONHandler` can now be configured to use arbitrary
  ``dumps()`` and ``loads()`` functions. This enables support not only for
  using any of a number of third-party JSON libraries, but also for
  customizing the keyword arguments used when (de)serializing objects.
- :meth:`~.Response.append_header` now supports appending raw Set-Cookie header values.

Fixed
-----
