[tox]

# --------------------------------------------------------------------
#
# NOTE(kgriffs): Python 3.8 is required when
# checking combined coverage. To check coverage:
#
#   $ tools/mintest.sh
#
# Which is equivalent to:
#
#   $ pip install -U tox==3.20 coverage
#   $ rm -f .coverage.*
#   $ tox -e pep8 && tox -e py38 && tools/testing/combine_coverage.sh
#
# You can then drill down into coverage details by opening the HTML
# report at ".coverage_html/index.html".
#
# --------------------------------------------------------------------

envlist = py38,
          pep8,
          docs

[testenv]
# NOTE(vytas): Other Falcon-specific environment variables for automatic
#   wrapping of coroutines are set in tests/conftest.py.
setenv =
    PIP_CONFIG_FILE={toxinidir}/pip.conf
    PYTHONASYNCIODEBUG=1
deps = -r{toxinidir}/requirements/tests
commands = {toxinidir}/tools/clean.sh {toxinidir}/falcon
           pytest tests []

# --------------------------------------------------------------------
# ASGI servers
# --------------------------------------------------------------------

[testenv:daphne]
deps = {[testenv]deps}
       daphne

[testenv:hypercorn]
deps = {[testenv]deps}
       hypercorn

# --------------------------------------------------------------------
# Test without optional packages
# --------------------------------------------------------------------

[testenv:no_optional_packages]
deps = {[testenv]deps}
commands = {toxinidir}/tools/clean.sh {toxinidir}/falcon
           pip uninstall --yes python-rapidjson daphne orjson
           pytest tests []

# --------------------------------------------------------------------
# Coverage
# --------------------------------------------------------------------

[with-coverage]
whitelist_externals = mkdir
                      mv
commands = "{toxinidir}/tools/clean.sh" "{toxinidir}/falcon"
           coverage run -m pytest tests []

[testenv:py35]
deps = {[testenv]deps}
       pytest-randomly
       jsonschema
whitelist_externals = {[with-coverage]whitelist_externals}
commands = "{toxinidir}/tools/clean.sh" "{toxinidir}/falcon"
           coverage run -m pytest tests --ignore=tests/asgi []

[testenv:py38]
basepython = python3.8
deps = {[testenv]deps}
       pytest-randomly
       jsonschema
whitelist_externals = {[with-coverage]whitelist_externals}
commands = {[with-coverage]commands}

[testenv:py38_sans_msgpack]
basepython = python3.8
deps = {[testenv]deps}
whitelist_externals = {[with-coverage]whitelist_externals}
commands = pip uninstall --yes msgpack
           "{toxinidir}/tools/clean.sh" "{toxinidir}/falcon"
           coverage run -m pytest tests -k "test_ws and test_msgpack_missing"

[testenv:py38_nocover]
basepython = python3.8
deps = {[testenv]deps}
       pytest-randomly
       jsonschema
commands = pytest tests []

# --------------------------------------------------------------------
# Additional test suite environments
# --------------------------------------------------------------------

[testenv:pypy3]
basepython = pypy3

# --------------------------------------------------------------------
# Debugging
# --------------------------------------------------------------------

[with-debug-tools]
deps = -r{toxinidir}/requirements/tests
       pdbpp

[testenv:py3_debug]
basepython = python3.8
deps = {[with-debug-tools]deps}
       uvicorn
       jsonschema

# --------------------------------------------------------------------
# mypy
# --------------------------------------------------------------------
[testenv:mypy]
basepython = python3.8
deps = {[testenv]deps}
       pytest-mypy
commands = {toxinidir}/tools/clean.sh {toxinidir}/falcon
           pytest --mypy -m mypy tests []

# --------------------------------------------------------------------
# Cython
# --------------------------------------------------------------------

[with-cython]
deps = -r{toxinidir}/requirements/tests
       cython
setenv =
    PIP_CONFIG_FILE={toxinidir}/pip.conf
    FALCON_CYTHON=Y
    FALCON_ASGI_WRAP_NON_COROUTINES=Y
    FALCON_TESTING_SESSION=Y
    PYTHONASYNCIODEBUG=1
install_command = python -m pip install --no-build-isolation {opts} {packages}
commands = pytest tests []

[testenv:py35_cython]
basepython = python3.5
install_command = {[with-cython]install_command}
deps = {[with-cython]deps}
setenv = {[with-cython]setenv}
commands = {[with-cython]commands}

[testenv:py36_cython]
basepython = python3.6
install_command = {[with-cython]install_command}
deps = {[with-cython]deps}
setenv = {[with-cython]setenv}
commands = {[with-cython]commands}

[testenv:py37_cython]
basepython = python3.7
install_command = {[with-cython]install_command}
deps = {[with-cython]deps}
setenv = {[with-cython]setenv}
commands = {[with-cython]commands}

[testenv:py38_cython]
basepython = python3.8
install_command = {[with-cython]install_command}
deps = {[with-cython]deps}
setenv = {[with-cython]setenv}
commands = {[with-cython]commands}

[testenv:py39_cython]
basepython = python3.9
install_command = {[with-cython]install_command}
deps = {[with-cython]deps}
setenv = {[with-cython]setenv}
commands = {[with-cython]commands}

# --------------------------------------------------------------------
# WSGI servers (Cythonized Falcon)
# --------------------------------------------------------------------

[testenv:wsgi_servers]
install_command = {[with-cython]install_command}
deps = {[with-cython]deps}
       gunicorn
       meinheld
       uwsgi
       waitress
commands = pytest -v tests/test_wsgi_servers.py

# --------------------------------------------------------------------
# Smoke testing with a sample app
# --------------------------------------------------------------------

[smoke-test]
commands = pip uninstall --yes msgpack
           python -c "import falcon.asgi; falcon.asgi.App()"
           falcon-bench -t 1 -b falcon-ext

[testenv:py38_smoke]
basepython = python3.8
deps = -r{toxinidir}/requirements/bench
commands = {[smoke-test]commands}

[testenv:py38_smoke_cython]
basepython = python3.8
deps = -r{toxinidir}/requirements/bench
       cython
commands = {[smoke-test]commands}

# --------------------------------------------------------------------
# Lint
# --------------------------------------------------------------------

[testenv:pep8]
deps = flake8>=3.7.0
       flake8-quotes
       flake8-import-order

basepython = python3.8

commands = flake8 []

[testenv:pep8-docstrings]
deps = flake8
       flake8-docstrings

basepython = python3.8

commands = flake8 \
             --docstring-convention=pep257 \
             --exclude=.ecosystem,.eggs,.git,.tox,.venv,build,dist,docs,examples,tests,falcon/vendor,falcon/bench/nuts \
             --select=D205,D212,D400,D401,D403,D404 \
             []

[testenv:pep8-examples]
deps = flake8
       flake8-quotes
       flake8-import-order

basepython = python3.8

commands = flake8 examples \
             --max-complexity=12 \
             --ignore=F403,W503,W504 \
             --max-line-length=99 \
             --import-order-style=google \
             --application-import-names=asgilook,look \
             []

# --------------------------------------------------------------------
# For viewing environ dicts generated by various WSGI servers
# --------------------------------------------------------------------

[testenv:py38_dump_gunicorn]
basepython = python3.8
deps = gunicorn
commands = gunicorn -b localhost:8000 tests.dump_wsgi

[testenv:py38_dump_waitress]
basepython = python3.8
deps = waitress
commands = waitress-serve --listen=localhost:8000 tests.dump_wsgi:application

[testenv:py38_dump_wsgiref]
basepython = python3.8
commands = python tests/dump_wsgi.py

# --------------------------------------------------------------------
# Benchmarking
# --------------------------------------------------------------------

[testenv:py35_bench]
basepython = python3.5
deps = -r{toxinidir}/requirements/bench
commands = falcon-bench []

[testenv:py35_bench_cython]
basepython = python3.5
deps = -r{toxinidir}/requirements/bench
       cython
commands = falcon-bench []

[testenv:py36_bench]
basepython = python3.6
deps = -r{toxinidir}/requirements/bench
commands = falcon-bench []

[testenv:py36_bench_cython]
basepython = python3.6
deps = -r{toxinidir}/requirements/bench
       cython
commands = falcon-bench []

[testenv:py37_bench]
basepython = python3.7
deps = -r{toxinidir}/requirements/bench
commands = falcon-bench []

[testenv:py37_bench_cython]
basepython = python3.7
deps = -r{toxinidir}/requirements/bench
       cython
commands = falcon-bench []

[testenv:py38_bench]
basepython = python3.8
deps = -r{toxinidir}/requirements/bench
commands = falcon-bench []

[testenv:py38_bench_cython]
basepython = python3.8
deps = -r{toxinidir}/requirements/bench
       cython
commands = falcon-bench []

[testenv:pypy_bench]
basepython = pypy
deps = -r{toxinidir}/requirements/bench
commands = falcon-bench []

[testenv:pypy3_bench]
basepython = pypy3
deps = -r{toxinidir}/requirements/bench
commands = falcon-bench []

# --------------------------------------------------------------------
# Check for new versions of vendored packages
# --------------------------------------------------------------------

[testenv:check_vendored]
basepython = python3.8
deps =
commands = {toxinidir}/tools/check-vendored.sh

# --------------------------------------------------------------------
# Package sanity check with twine
# --------------------------------------------------------------------

[testenv:twine_check]
basepython = python3.8
skipsdist = True
deps = setuptools
       twine
       wheel
commands =
    python {toxinidir}/setup.py bdist_wheel sdist
    twine check {toxinidir}/dist/*

# --------------------------------------------------------------------
# Documentation
# --------------------------------------------------------------------

[testenv:docs]
basepython = python3.8
deps = -r{toxinidir}/requirements/docs
commands =
    sphinx-build -W -E -b html docs docs/_build/html []

[testenv:towncrier]
basepython = python3.8
deps = -r{toxinidir}/requirements/docs
        toml
        towncrier
commands =
    {toxinidir}/tools/towncrier_draft.py

[testenv:dash]
basepython = python3.7
setenv =
    DASHBUILD = True
deps = -r{toxinidir}/requirements/docs
commands =
    sphinx-build -j 4 -W -E -b html docs docs/_build/html []
    {toxinidir}/tools/generate_dash.sh

# --------------------------------------------------------------------
# Tutorial ("look") tests
# --------------------------------------------------------------------

[testenv:look]
basepython = python3.8
deps =
    -r{toxinidir}/examples/look/requirements/test
commands =
    pytest {toxinidir}/examples/look/tests

# --------------------------------------------------------------------
# ASGI tutorial ("asgilook") tests
# --------------------------------------------------------------------

[testenv:asgilook]
basepython = python3.8
deps =
    -r{toxinidir}/examples/asgilook/requirements/asgilook
    -r{toxinidir}/examples/asgilook/requirements/test
commands =
    pytest \
        --cov asgilook \
        --cov-config {toxinidir}/examples/asgilook/.coveragerc \
        --cov-fail-under 100 \
        --cov-report term-missing \
        {toxinidir}/examples/asgilook/tests/

# --------------------------------------------------------------------
# Ecosystem
# --------------------------------------------------------------------

[testenv:hug]
basepython = python3.7
deps = virtualenv
commands =
     {toxinidir}/tools/testing/install_hug.sh
     {toxinidir}/tools/testing/test_hug.sh

# --------------------------------------------------------------------
# E2E tests
# --------------------------------------------------------------------

[testenv:e2e_chrome]
basepython = python3.8
deps =
    -r{toxinidir}/requirements/e2e
commands =
    pytest {toxinidir}/e2e-tests/ --browser=chrome

[testenv:e2e_firefox]
basepython = python3.8
deps =
    -r{toxinidir}/requirements/e2e
commands =
    pytest {toxinidir}/e2e-tests/ --browser=firefox

# --------------------------------------------------------------------
# Wheels stuff
# --------------------------------------------------------------------

[testenv:wheel_check]
basepython = python
skipsdist = True
skip_install = True
deps = setuptools>=44
       pytest
passenv = GITHUB_*
setenv =
    PYTHONASYNCIODEBUG=0
    PYTHONNOUSERSITE=1
    FALCON_ASGI_WRAP_NON_COROUTINES=Y
    FALCON_TESTING_SESSION=Y
commands =
    pip uninstall --yes falcon
    pip install --find-links {toxinidir}/dist --no-index --ignore-installed falcon
    python --version
    python -c "import sys; sys.path.pop(0); from falcon.cyutil import misc, reader, uri"
    python .github/workflows/scripts/verify_tag.py {toxinidir}/dist
    pip install -r{toxinidir}/requirements/tests
    pytest -q tests []
